// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  artifacts          Artifact[]
  agentSessions      AgentSession[]
  discoverySessions  DiscoverySession[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AgentSession {
  id          String   @id @default(cuid())
  userId      String?
  agentName   String
  sessionId   String   @unique
  status      String   @default("active")
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  discoverySession DiscoverySession?

  @@map("agent_sessions")
}

model Artifact {
  id          String   @id @default(cuid())
  userId      String?
  sessionId   String?
  agentName   String
  type        String
  name        String
  content     String   @db.Text
  metadata    Json?
  size        Int?
  mimeType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("artifacts")
}

model AgentMemory {
  id        String   @id @default(cuid())
  agentName String
  key       String
  value     String   @db.Text
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agentName, key])
  @@map("agent_memory")
}

model Tool {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  parameters  Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usages      ToolUsage[]

  @@map("tools")
}

model ToolUsage {
  id        String   @id @default(cuid())
  toolId    String
  sessionId String?
  agentName String
  input     Json?
  output    Json?
  duration  Int?
  success   Boolean  @default(true)
  error     String?
  createdAt DateTime @default(now())

  tool Tool? @relation(fields: [toolId], references: [id], onDelete: SetNull)

  @@map("tool_usage")
}

model DiscoverySession {
  id              String   @id @default(cuid())
  userId          String
  agentSessionId  String   @unique
  title           String?
  problemStatement String?
  currentPhase    String   @default("setup")
  techniquesUsed  String[]
  status          String   @default("active")
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  completedAt     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentSession AgentSession @relation(fields: [agentSessionId], references: [id], onDelete: Cascade)
  
  ideas           Idea[]
  clusters        IdeaCluster[]
  recommendations Recommendation[]
  messages        Message[]

  @@map("discovery_sessions")
}

model Idea {
  id                String   @id @default(cuid())
  discoverySessionId String
  title             String
  description       String   @db.Text
  rationale         String?  @db.Text
  feasibility       String?
  impact            String?
  effort            String?
  score             Float?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  discoverySession DiscoverySession @relation(fields: [discoverySessionId], references: [id], onDelete: Cascade)
  
  clusterMemberships IdeaClusterMembership[]

  @@map("ideas")
}

model IdeaCluster {
  id                String   @id @default(cuid())
  discoverySessionId String
  name              String
  description       String?  @db.Text
  color             String?
  createdAt         DateTime @default(now())

  discoverySession DiscoverySession @relation(fields: [discoverySessionId], references: [id], onDelete: Cascade)
  
  memberships       IdeaClusterMembership[]

  @@map("idea_clusters")
}

model IdeaClusterMembership {
  id        String @id @default(cuid())
  ideaId    String
  clusterId String

  idea    Idea    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  cluster IdeaCluster @relation(fields: [clusterId], references: [id], onDelete: Cascade)

  @@unique([ideaId, clusterId])
  @@map("idea_cluster_memberships")
}

model Recommendation {
  id                String   @id @default(cuid())
  discoverySessionId String
  type              String
  title             String
  description       String   @db.Text
  priority          String   @default("medium")
  category          String?
  metadata          Json?
  createdAt         DateTime @default(now())

  discoverySession DiscoverySession @relation(fields: [discoverySessionId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model Message {
  id                String   @id @default(cuid())
  discoverySessionId String
  type              String   // "user" | "agent" | "system" | "technique"
  content           String   @db.Text
  phase             String?
  technique         String?
  metadata          Json?
  createdAt         DateTime @default(now())

  discoverySession DiscoverySession @relation(fields: [discoverySessionId], references: [id], onDelete: Cascade)

  @@index([discoverySessionId, createdAt])
  @@map("messages")
}
